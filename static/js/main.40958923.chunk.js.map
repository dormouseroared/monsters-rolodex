{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/console-log/console-log.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","cardDetails","className","src","id","alt","name","email","username","phone","address","city","company","bs","CardList","props","monsterList","map","monster","ConsoleLog","console","log","Array","isArray","children","stringify","JSON","SearchBox","placeholder","handleChange","type","onChange","App","state","monsters","searchField","fetch","then","response","json","result","setState","this","filteredMonsters","filter","toLowerCase","includes","e","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"wTAEO,SAASA,EAAT,GAA+B,IAAfC,EAAc,EAAdA,YAEnB,OACI,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAG,+BAA0BF,EAAYG,GAAtC,0BAAkEC,IAAI,YAC9E,6BAAKJ,EAAYK,OACjB,4BAAIL,EAAYM,QAChB,4BAAIN,EAAYG,KAChB,4BAAIH,EAAYO,WAChB,4BAAIP,EAAYQ,QAChB,4BAAIR,EAAYS,QAAQC,OACxB,4BAAIV,EAAYW,QAAQC,OARSZ,EAAYG,ICDlD,IAAMU,EAAW,SAACC,GAKrB,OACI,qBAAKb,UAAU,YAAf,SACMa,EAAMC,YAAYC,KAAI,SAAAC,GAAO,OAC3B,cAAClB,EAAD,CAAMC,YAAaiB,UCZtBC,EAAa,SAACJ,GAOvB,OANAK,QAAQC,IAAI,gBAAiB,uCAC7BD,QAAQC,IAAI,SAAUC,MAAMC,QAAQR,EAAMS,WAC1CJ,QAAQC,IAAIN,EAAMS,UACdT,EAAMU,WACNL,QAAQC,IAAIK,KAAKD,UAAUV,EAAMS,YAE9B,GCLEG,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,uBACI3B,UAAU,SACV4B,KAAK,SACLF,YAAaA,EACbG,SAAUF,MC+FHG,M,kDA7Fb,aAAe,IAAD,8BACZ,gBAEKC,MAAQ,CACXC,SAAU,GACVC,YAAa,IALH,E,qDASd,WAAqB,IAAD,OAClBC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAM,OAAI,EAAKC,SAAS,CAACP,SAAUM,S,oBAM3C,WAAU,IAAD,SAKyBE,KAAKT,MAA9BC,EALA,EAKAA,SAAUC,EALV,EAKUA,YAEXQ,EAAmBT,EAASU,QAAO,SAAA1B,GAAO,OAAIA,EAAQZ,KAAKuC,cAAcC,SAASX,EAAYU,kBAMpG,OACE,sBAAK3C,UAAU,MAAf,UAEE,cAACiB,EAAD,CAAYM,WAAW,EAAvB,SAA+BiB,KAAKT,MAAMC,WAC1C,kDAEA,cAAC,EAAD,CAAWN,YAAY,qBAAqBC,aAAc,SAAAkB,GAAC,OAAI,EAAKN,SAAS,CAACN,YAAaY,EAAEC,OAAOC,QAAQ,kBAAM7B,QAAQC,IAAI,EAAKY,aAKnI,cAAC,EAAD,CAAUjB,YAAa2B,IAkBrB,Y,GA7DQO,aCIHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SAOjDX,M","file":"static/js/main.40958923.chunk.js","sourcesContent":["import \"./card.styles.css\"\r\n\r\nexport function Card ({cardDetails}) {\r\n    // console.log(cardDetails)\r\n    return (\r\n        <div className=\"card-container\" key={cardDetails.id}>\r\n            <img src={`https://robohash.org/${cardDetails.id}?set=set1&size=180x180`} alt=\"monster\" />\r\n            <h2>{cardDetails.name}</h2>\r\n            <p>{cardDetails.email}</p>\r\n            <p>{cardDetails.id}</p>\r\n            <p>{cardDetails.username}</p>\r\n            <p>{cardDetails.phone}</p>\r\n            <p>{cardDetails.address.city}</p>\r\n            <p>{cardDetails.company.bs}</p>\r\n        </div>\r\n    )\r\n}","import \"./card-list.styles.css\"\r\n\r\nimport { Card } from \"../card/card.component\"\r\n\r\nexport const CardList = (props) => {\r\n    // console.log(props.monsterList)\r\n    /*\r\n        JSX starts here\r\n    */\r\n    return (\r\n        <div className=\"card-list\">\r\n             {props.monsterList.map(monster => (\r\n                <Card cardDetails={monster}/>\r\n             ))}\r\n        </div>\r\n    )\r\n}\r\n\r\n// using () when breaking a line to have Card on its own line above","export const ConsoleLog = (props) => {\r\n    console.log(\"%c ConsoleLog\", \"color:yellow; background-color:blue\")\r\n    console.log(\"array?\", Array.isArray(props.children))\r\n    console.log(props.children)\r\n    if (props.stringify) {\r\n        console.log(JSON.stringify(props.children))\r\n    }\r\n    return false // component must return something\r\n}\r\n\r\n// https://javascript.plainenglish.io/can-you-console-log-in-jsx-732f2ad46fe1\r\n// We have to remember that JSX is not vanilla JavaScript, nor is it HTML.\r\n// It is a syntax extension.\r\n//\r\n// This component is adapted from the article to allow the item to be dumped out\r\n// if the props stringify={true} are included\r\n// also note that a component must return something or there will be an error, so in this case we return false\r\n// it should be possible to use this component elsewhere\r\n//\r\n// https://camunda.com/blog/2021/02/be-careful-with-console-log-when-using-react-strictmode/\r\n\r\n// experimenting with the buttons and strict mode it does look as if \r\n// using console.log directly is stopped by react strict mode","import \"./search-box.styles.css\"\r\n\r\nexport const SearchBox = ({ placeholder, handleChange }) => (\r\n    <input\r\n        className=\"search\"\r\n        type=\"search\"\r\n        placeholder={placeholder}\r\n        onChange={handleChange}\r\n    />\r\n)\r\n\r\n\r\n\r\n// () used instead of {} in function because return is implied\r\n// and we just want to group it\r\n","import { Component } from \"react\"\nimport \"./App.css\"\n\nimport {CardList} from \"./components/card-list/card-list.component\"\nimport {ConsoleLog} from \"./components/console-log/console-log.component\"\n\nimport { SearchBox } from \"./components/search-box/search-box.component\"\n\nclass App extends Component {\n  constructor() {\n    super()\n\n    this.state = {\n      monsters: [],\n      searchField: \"\"\n    }\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then(response => response.json())\n    .then(result => this.setState({monsters: result}))\n    \n  }\n\n  // monsters and the array of objects are a key value pair\n\n  render() {\n    // flag to try out a conditional dump of the array with map\n    // could also try { dump && ()}\n    const dump = false\n    \n    const {monsters, searchField} = this.state\n    // same as monsters = this.state.monsters etc\n    const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()) )\n    \n\n    /*\n      JSX starts here\n    */\n    return (\n      <div className=\"App\">\n\n        <ConsoleLog stringify={false}>{this.state.monsters}</ConsoleLog>\n        <h1>Monsters Rolodex</h1>\n\n        <SearchBox placeholder=\"search Monsters...\" handleChange={e => this.setState({searchField: e.target.value}, () => console.log(this.state))}/>\n\n\n        \n\n        <CardList monsterList={filteredMonsters} />\n\n\n\n\n        {dump ?\n\n          <>\n          <div>\n            <ul>\n            {this.state.monsters.map((user) => \n              <li key={user.id}>\n                {user.name} &bull; {user.email}\n              </li>)}\n            </ul>\n          </div>\n          </>\n\n        : null}\n\n      </div>\n    )\n  }\n}\n\n// experimental section\n// https://www.youtube.com/watch?v=oQlwcDkcYe0\n// You can't console.log in React\n// The first button logs out the event, but the second button does nothing\n// insert <Buttons /> above to show these two buttons\n// see the ConsoleLog component for more details\n\n// eslint-disable-next-line\nfunction Buttons () {\n  const handler = (event) => {\n    console.log(event)\n  }\n\n  return (\n    <>\n      <p></p>\n      <button onClick={handler}>Pass a handler with log</button>\n      <button onClick={console.log}>Pass console.log directly</button>\n    </>\n  )\n}\n\n// setState is asynchronous, so don't expect an immediate update\n// the second parameter is for a callback to run when the work is completed\n// and it is left in as a reminder\n\nexport default App\n\n\n\n// <input type=\"search\" placeholder=\"search monsters\" onChange={e => this.setState({searchField: e.target.value}, () => console.log(this.state))} />","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport reportWebVitals from \"./reportWebVitals\"\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n\n// ReactDOM.render(<React.StrictMode><App /></React.StrictMode>, document.getElementById(\"root\"))\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n\n// ReactDOM.render(\n\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n"],"sourceRoot":""}